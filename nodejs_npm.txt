● NodeJS summary #[nodejs_summary]
@[https://nodejs.org]
  - VP8 based JS engine with Server API extensions for subprocesses, TTY, TCP servers, ...

- NodeJS Version Manager Installer (nvm) [[{stack.nodejs.101,devops.101]]
  https://github.com/nvm-sh/nvm
  Tool to manage different versions of node in parallel.
  $ nvm install 14
  $ nvm use 14
  $ nvm uninstall 12
  When using nvm, npm packages are installed in $HOME/.nvm (vs /var/lib),
 so we don't need to be root to do a global '$ npm -g install package'
  [[}]]

- Node on Windows:
  $ npm install --global windows-build-tools
  @[https://www.npmjs.com/package/windows-build-tools]

 $ node                    ← Start interactive shell (REPL loop)
 $ node path_to_file.js    ← Run JS file
 $ node -e "{{js_code}}"   ← Evaluate JS code
 $ node -p "{{js_code}}"   ← Evaluate and print result, useful to see
                             node's dependencies versions
                             e.g: $ $ node -p "{{process.versions}}"
                             { http_parser: '2.8.0',
                               node: '10.16.3',
                               v8: '6.8.275.32-node.54',
                               ...
                               unicode: '12.1',
                               ... }

 $ node --no-lazy      \   ← Activate inspector, pausing execution until      [debug]
   --inspect-brk file.js     a debugger is connected once source code is
                             fully parsed

● Node Package Manager (npm) https://www.npmjs.com/ [[{]]

• npm project layout
  ./package.json       ← JSON file with dev/pro. package dependendies
  ./node_modules       ← Installed packages (Add to   .gitignore , do not commit).
  ./package-lock.json  ← npm v5+: It describes the exact tree that was generated,
                         such that subsequent installs are able to generate
                         identical trees , regardless of intermediate dependency updates.
                         Must be kept in git (version control) as any other source file.


  $ npm init                ← create "package.json" interactively
  $ npm install             ← Download dependencies listed in package.json
  $ npm install mod01@v1.1  ← Install module 'mod01' @ version v1.1 (default to "latest")
                              --save    : save to package.json dependencies.
                              --save-dev: save to package.json dev dependenices
                              --global  : install OS system wide

  $ npm uninstall mod01      ← Uninstall +remove dependencies@package.json
  $ npm list                 ← Print tree of locally-installed dependencies
                               Use --global --depth=0 to list
                               top-level globally installed modules

  $ npm-check               ← report outdated/incorrect/unused dependencies
                              · Use --skip-unused to ignore un-used packages
  $ npm-check --update      ← Interactively update out-of-date packages
  $ npm-check --update-all  ← Update all no prompting


  $ npm-why $mod_name       ← Identifies why an package is installed.

- Update package.json deps. to latest versions
  REF: https://stackoverflow.com/questions/16073603/how-to-update-each-dependency-in-package-json-to-the-latest-version
  1) $ npm i -g npm-check-updates
  2) $ ncu -u
  3) $ npm install

- package.json: Overriding (problematic) package version from
      nested-dependency with newer version:
  {
    "name": "myproject",
    "version": ...
    "scripts": ...
    "dependencies": ...
    "devDependencies": {
      "modA": "~4.6.2",    <··· nested dependency in buggy modB:1.1.0
      "modB": "^1.1.3",    <··· modB:1.1.3 fixes the issue
      ...
    },
    "overrides": {
      "modB": {
        "modB": "^1.1.3"  <··· Make sure 1.1.3 is always used for this mod.
      }
    }
  }

- Fixing  "thousands of vulnerabilities found" on '$ npm install'.
  1) Remove/rename node_modules.
  2) Remove package-lock.json
  3) $ npm install          <- Probably it will update to bugleess free deps.
  4) $ npm i --package-lock-only <- Generate new package-lock.json
[[}]]


[[{stack.nodejs,02_doc_has.resource,qa.billion_dolar_mistake,performance.js_engine,troubleshooting,security.tls,dev_lang.js,qa]]
● NodeJS What's new
• Node 14+
  ·  Optional chaining operator '?.'                         [billion_dolar_mistake][qa]
     skip manual null validation when fetching property located deep
     within a chain of connected objects. e.g.:
     const adventurer = {
       name: 'Alice',
       cat: { name: 'Dinah' }
     }
     console.log(adventurer. dog?. name); ← ?.  Result: undefined (no error)
      console.log(adventurer.dog ⅋⅋       ← manual (non-compact) check (false)
                  adventurer.dog.name);
    WARN:  This operator doesn't fix the billion dolar mistake,
           since check for nulls/undefined is still needed, but
           it makes syntax more compact and clear to read.
  ·  Nullish coalescing logical operator '??'                [billion_dolar_mistake][qa]
     logical op. returns the operand on its right when
     the operand on its left is null or undefined.
     Otherwise, it returns its left-hand-side operand. e.g:

     let safe_name = nullableEntry ?? "n/a" ← Recomended fallback op. (vs || )
• Node 12: 2019-10   LTS version!!!
@[https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f]
• 30% faster startup generating code cache for built-in libraries
  in advance at build time, and embed it in the binary.
• better default heap limits based on available mem vs using defaults.
  Particularly useful when processing large data-sets.     [performance]
• new features:
  ✓ diagnostic report                                      [troubleshooting]
    generate report on demand on certain events
    (production crashes, slow performance, memory leaks,
     high CPU usage, unexpected errors ...). More info at:
     https://medium.com/the-node-js-collection/⏎
       easily-identify-problems-in-node-js-applications⏎
       -with-diagnostic-report-dc82370d8029
  ✓ bundled heap dump capability
    Useful to debug memory problems. More info at:
    https://github.com/nodejs/node/pull/27133
    https://github.com/nodejs/node/pull/26501
• updates to V8(v 7.4) brings:
  · Async stack traces:
    https://v8.dev/blog/v8-release-72#async-stack-traces
  · Faster calls with arguments mismatch
    https://v8.dev/blog/v8-release-74#faster-calls-with-arguments-mismatch
  · Faster await:
    https://v8.dev/blog/v8-release-73#faster-await
  · Faster javascript parsing:
    https://v8.dev/blog/v8-release-72#javascript-parsing

• Hello TLS 1.3 introduces and defaults to TLS 1.3        [TLS]
• Native Modules Easier to implement include better support
  in Worker threads, and N-API .
  https://nodejs.org/api/n-api.html#n_api_n_api
• Workers Threads no longer experimental. More info at:
@[https://medium.com/@Trott/using-worker-threads-in-node-js-80494136dbb6]
• Experimental ES6 Module Support                         [es6]
[[}]]
[[{stack.nodejs,code.low_code,01_PM.BACKLOG]]
● oclif
@[https://oclif.io/]
• Open (console) command line interface Framework to create
  friendly cli tools.
[[}]]


