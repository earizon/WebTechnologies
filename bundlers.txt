NOTE: Package bundler "==" assets bundle +  runtime module "loader"

# WebPack Summary [[{dev_lang.js.webpack]]

WARN: `esbuild` (golang based) is probably preferred for new projects with "big" codebases,
       but `webpack` is still the most widely used HTML/JS/CSS packager.

- Requirements: Node.JS 10.13.0+ (2021-11)
$ $ npm init -y                                  ← Init new NodeJS proyect (package.json)
$ $ npm  --development webpack                   ← add webpack dev.dependency
$ $ npm  --development webpack-dev-server        ← web server enabling page reload on changes.
$ $ npm  css-loader style-loader --save-dev      ← css bundler.
$ $ npm  --save-dev typescript ts-loader         ← Typescript support. (requires extra tsconfig.json)

┌    webpack.config.js  ──────────────────┐ ← NOTE: It's a JS file (not JSON file)
│ 'use strict'                            │
│                                         │
│ const debug = process.env.NODE_ENV !==  │
│               "production"              │
│ const ExtractText =                     <·· moves all required *.css modules in entry chunks into isolated CSS file.
│  require('extract-text-webpack-plugin'),│   (avoid inlining CSS inside JS bundle, loading an caching in parallel)
│       path = require('path'),           │
│    webpack = require('webpack')         │
│                                         │
│ module.exports = {                      │
│   mode: 'production' ←···················· := development | production | none
│   context: __dirname,                   │
│   devtool: debug ? 'inline-sourcemap'   │
│                  : null                 │
│                                         │
│   entry: {   <···························· Where to start when resolving dependencies.
│     myApp : './src/app.js',    <·········· typical entrypoint for NodeJS we are working on (frequent changes) (other examples index.ts , ...)
│     vendor: './src/vendor.js', <·········· (react/images/...) mods. NOT CHANGING over rebuilds(output CACHED after 1st build)
│                                         │
│     entry3: {                  <·········· Example entry showing all options allowed.
│       dependOn: [...]            <········ Must be loaded before this.
│       filename: ...              <········ Set output file name. e.g.: '[name].[contentHash].bundle.js'
│       import  : ...              <········ RUNTIME mods loaded upon startup  (afte build and packaging)
│       library: ...               <········ Lib.options to bundle a lib. More info at:
│                                         │@[https://webpack.js.org/configuration/output/#outputlibrary]
│       runtime: ...               <········ If set, a new runtime chunk will be created (incompatible with dependOn)
│       publicPath: ...            <········ Public external URL address for output files
│     }                                   │
│   }                                     │
│                                         │
│   output: {                             │
│     path : "./" , filename:"bundle.js" <··· must match <script src="bundle.js" /> @ index.html
│   },                                    │   Or filename: '$name.build.js' where $name is replaced in multi-
│                                         │   output packages by myApp, vendor, entry3, ....
│                                         │
│   module: {                   <··········· Extension point (vs 'plugins' that offer wider ranges of task)
│                                         │
│     rules: [                    <········· Ordered list of rules for loaders
│       {                                 │
│         test: /\.txt$/          <········· Apply to files matching regex
│        ,use : 'raw-loader'      <········· Loader (transformer) to use for matching file
│       },                                │
│                                         │
│       { test: /\.css$/,         <········· embed output css in bundle.js (discouraged)
│         loader: 'style!css'             │  alternatively, to output css to styles.css:
│                                         │  loader: ExtractText.extract('style', 'css')
│       }                                 │
│       { test: /\.tsx?$/,        <········· TS rules (.ts, .tsx)
│         use: 'ts-loader',       <········· Alt: 'babel-loader', ...
│         exclude: /node_modules/,        │
│       }                                 │
│     ]                                   │
│   },                                    │
│                                         │
│   resolve: {                    <········· type-script support.
│     extensions: ['.tsx', '.ts', '.js'], │
│   },                                    │
│                                         │
│   plugins: debug ? [] : [       <·········  Plugins allow wider range of tasks than loaders,
│                                         │   (e.g.: bundle optimization, ENV.VARs injection,...)
│     new HtmlWebpackPlugin(              │
│       { template:                       │┌ inspectpack de-duplicate plugin:
│            '.../tpl.html' }             │· ================================
│     )                                   │· STEP 1) metalevel tips:
│     ,                                   │·    - Look for identical code sources.
│     new webpack.optimize.DedupePlugin(),←┘    - Change dependencies in root package.json:
│     new webpack.optimize                │       (WARN: commit package.json & package-json.lock first)
│         .OccurenceOrderPlugin(),        │     - Critically examine and scrutinize your dependencies:
│     new webpack.optimize                │       Do you really need all of the bundled packages?
│         .UglifyJsPlugin({               │
│          mangle: false,sourcemap: false │  STEP 2) potentially force packages and code sources to collapse
│     })                                  │  to single entities, even if the normal rules of npm/yarn/webpack
│       ],                                │  would prevent it.
│     , new XXX...Plugin(...)             │    - Set resolve.alias in webpack.config.js
│   ],                                    │      Direct webpack to use a single package when resolving dependencies
│ }                                       │      that would follow normal (multi-package) resolution.
└─────────────────────────────────────────┘    - Set the resolutions field with yarn:  Direct yarn (not available
                                                 on npm) to resolve packages to a single version, overriding what is
                                                 normally considered an allowed resolution and node_modules
                                                 installation. This work better with TS than with JS modules,
                                                 due to the natural tendency of JS to break even for minor
                                                 version upgrades.
                                                 TIP: Don't use JS for module/lib development.
                                                 More info at:
                              @[https://formidable.com/blog/2018/finding-webpack-duplicates-with-inspectpack-plugin/]

### WebPack ussage (once configured)
```bash
  $ webpack ...         \  <·· Alt 1: use. package app
    --watch             \      ← monitor changes and rebuild automatically
    --progress --colors \        http://localhost:8080/webpack-dev-server/
    -p                  \      ← production optimizations (slower during dev)
    --display-modules          ← show intermediate modules using during packing.
                               Use --config ..../webpack.config.js  to overload default path

  $ webpack-dev-server \   <·· Alt 2: web server autoreloading web page on changes!!!.
    --hot \                    Hot Module Replacement (HMR) "magically" keeps the internal state
    --inline                   of the Web App (and potentially the UI if tied to the state)
```

## What's new [[{]]
@[https://www.infoq.com/news/2020/10/webpack-5/]
## Webpack 5.0:
  rethinks some core architectural decisions focusing on:
  ✓ Improved performance (persistent and long-term) caching
  ✓ Improved algorithm defaults
  ✓ Improved bundle sizes (better Tree Shaking and Code generation)
  ✓ Improved compatibility with web platforms
  ✓ clean up internal structures inR "weird state" while implementing features in v4
  ✓ Preparing for LTS (no breaking changes after 5)
  • two key changes have caught the attention of JS community:
    · Module Federation
    · change in default behavior for the Node.js API polyfills.
[[}]]
[[dev_lang.js.webpack}]]

# Esbuild (x100 faster) [[{dev_lang.js.esbuild]]
@[https://www.infoq.com/news/2020/06/esbuild-faster-go-js-bundler/]
* written in golang and multi-core as base.
* Extreme speed without needing a cache (up to 100x faster)
* Support fo JS/TypeScript/JSX built-in
* straightforward API for CLI,JS and Go
* Supports ESM (ES6 Modules) and CommonJS modules
* Tree shaking, minification, and source maps
* Local server, watch mode, and plugins

* Vite uses esbuild for fast packaging (esbuild for Vue???)
  * designed with ES modules in mind from the scratch removing the need for "old bundling".
  * Vite divides modules into:
    1. Dependencies: with little/no-change during development,
       shipped in various module formats (e.g. ESM or CommonJS).
    2. Source code: often non-plain standard (JSX/Vue/Svelte components)
       that needs transforming, and edited very often.
    • seeks to bring order-of-magnitude speed improvements in
      JS bundling+minification. (10x-100x)
      0.37 secs vs 63 secs pf webpack 5!!!!
[[dev_lang.js.esbuild}]]

# Rome v10: Integrated Toolchain [[{dev_lang.js.rome,01_PM.TODO]]
  https://www.infoq.com/news/2022/11/rome-v10-stable-release-linter/
* All-In-One, Integrated Front-End Toolchain (linter, formatter, ...)
  aiming to unify the dozens of frontend language tools into a single
  easy-to-use tool built from scratch for JS,TS,HTML,JSON,MD and CSS.
  """I really hope @rometools accomplishes for linting/formatting/testing
     what esbuild did for compilation."""
* designed to replace Babel, ESLint, webpack, Prettier, Jest and others.
* Rust rewrite, up 2 ORDERS OF MAGNITUDE FASTER than ESLint and Prettier
  (tested on a large codebase of over 400 files)
* Available as VSCode extension.
* Minimal configuration.
* beautiful and descriptive diagnostics
* built-in support for JavaScript and TypeScript.
* WARN: type bundling & (type)doc generation still remain painfully slow.

* Rome formatter aims at feature parity with Prettier, the de-facto
  standard for code formatting in the front-end community.
[[dev_lang.js.rome}]]

# TODO: [[{PM.TODO]]
## Profile webpack "builds".
  https://www.npmjs.com/package/speed-measure-webpack-plugin

## Webpack optimization options.
https://webpack.js.org/configuration/optimization/

## squoosh WebPack: Scale images from 1.4MB to 80Kbs with "same" quality !!! [[{]]
   https://squoosh.app/

   Smaller images mean faster load times. Squoosh can reduce file size
   and maintain high quality.
https://github.com/bcheidemann/squoosh-webpack-plugin
[[}]]

# Vite 4 (Babel replaced with 20x faster SWC(Rust) [[{]]
  2022-12-17
  https://www.infoq.com/news/2022/12/vite-4-faster-swc/
- 5 months after Vite 3.0 motivated by the breaking upgrade
  from Rollup 2.0 to 3.0.
- Vite 4.0 adds support for SWC (Rust), 20x than Babel.
- Vite: framework-agnostic build tool and already supported
  by Storybook, Astro, Nuxt, SvelteKit, Solid Start, Hydrogen,
  Laravel, Qwik City, and more.
    For React two plugins are available with different tradeoffs:
- Next,JS recently released v13 including Turbopack, a new,
  still-in-alpha, Rust-based replacement to Webpack that claimed
  to be orders of magnitude faster than Vite. Study of that claim
  associated most of the speed improvements to the use by Turbopack
  of SWC, a Rust-based bundler that is still in alpha.
  """
   SWC is now a mature replacement for Babel, especially in
  the context of React projects
   SWC's React Fast Refresh implementation is a lot faster than Babel,
  """
[[}]]

# SWC Transpiler 20x faster than Babel [[{dev_lang.js.swc]]
- Rust based.

  $ pnpm i -D @swc/cli @swc/core  # install
  $ npx swc ./file.js
    -o output.js                  # file ouput (STDOUT by default)
  $  npx swc ./indir -d outdir/ \ # transpile full directory
    --config-file ...   \         # opt. def.  ./.swcrc
                                  # use --no-swcrc to ignore .swcrc
    --env-name="test' \           # 'env' to use when loading configs and plugins.
                                  #  Def. to $SWC_ENV ··> $NODE_ENV ··> development
    --ignore **/*.test.js         # opt. List of glob paths to skip
    --only **/*.js                # opt. Include only files in only list
    --watch                       # opt. automatically recompile on changes.
                                  # (PRESETUP: $ npm i -D chokidar)
    --quiet                       # Suppress compilation output.
    --source-maps=true            # opt: true|false|inline|both
    --source-map-target input.map.js #
    -source-file-name             # opt. Set sources[0] on returned source map
    --source-root                 # opt. root from which all sources are relative.
    --copy-files                  # opt. When compiling a directory, copy over non-compilable files.
    --include-dotfiles            # opt.
    --config module.moduleId=Hi   # Override config in ./.swcrc
    --sync                        # opt.  Invoke swc synchronously. Useful for debugging.
    --log-watch-compilation       # Log message when watched file is successfully compiled.
    --extensions ...              # Use specific extension

### @swc/wasm-web
   synchronously transform code inside the browser using WebAssembly.

### @swc/jest
   faster replacement for ts-jest

### swc-loader: Use swc will webpack
    (jsc.transform.react.development option automatically set)

  $ pnpm i -D @swc/core swc-loader

  $ edit webpack.config.js
  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /(node_modules)/,
 +      use: {
 +        loader: "swc-loader"
 +        options: {       ┐  needed only when
 +          parseMap: true ├─ used with
 +        }                ┘  babel-loader
 +      }
      }
    ]
  }


  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /(node_modules)/,
        use: {
          loader: "swc-loader",
        }
      }
    ]
  }

## Bundling with swcpack (under construction)
* bundles JavaScript or TypeScript files into one.
* This feature is currently named spack(spack.config.js)
  It will be renamed to swcpack(swcpack.config.js) in v2.

  $ editor spack.config.js # <·· config bundling.
  + const { config } = require("@swc/core/spack");
  +
  + module.exports = config({
  +   entry: {
  +     web: __dirname + "/src/web.ts",
  +     android: __dirname + "/src/android.ts",
  +   },
  +   output: {
  +     path: __dirname + "/lib",
  +   },
  +   module: {},
  + });

  $ npx spack              # <·· execute bundling.

  INPUT                        OUTPUT
  -------------------------    -------------------------
  lib.js
  console.log("loading A");    console.log("loading A");
  export function a() {        function a() {
    console.log("use!");         console.log("use!");
  }                            }
                               a();
  app.js
  import { a } from "./a";
  a();

* naming collisions between multiple files are automatically handled.

* Tree Shaking: Just like other modern bundlers, SWC can remove unused exports.
  It also removed dead code.

* CommonJS (NodeJS) Support bundling to more compact output than webpack.

[[dev_lang.js.swc}]]

[[PM.TODO}]]

