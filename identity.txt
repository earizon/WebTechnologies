● W3C DIDs [[{security.aaa,use_case.identity.SSI]]
• Part of the W3C technologies for Self Souveiring Identity (SSI)
• SPEC: @[https://www.w3.org/TR/did-core/]
• DID stands for Decentralized IDentifier representing any type of subject
  (person, organization, thing, data model, abstract entity, etc.)
  decoupled from any centralized registries (Active Directory, ..),
  identity providers (Facebook, Google, ...) or certificate authorities.  Eg:

  did:ether:21tDAKCERh95uGgKbJNHYp;foo:bar=high
                                       ───┬────
  ┌───────────────────────────────────────┘
  generic DID parameter names.
  · hl             resource hash of DID document (integrity protection)
  · service (id)   Identifies a service from the DID document
  · version-id     Identifies a specific version of DID document
                   (sequential number, UUID, ...).
                   (optional in implementations)
  · version-time   Identifies a certain version timestamp of DID document
                   (optional in implementations)

• DIDs are URIs linking the DID subject to a DID document. The DID
  document in practice will be:
   ✓ cryptographic material        (public keys, revoked pub.keys,...)
   ✓ verification methods/services (signature schemas, ...)
   ? other public credentials as
     desired by the owner/controller
  · Non-normative (self-managed) minimal DID-document example:
    {
      "@context": "https://www.w3.org/ns/did/v1",
      "id": "did:id_of_DID_method:DIDI_method_specific_id",
      "authentication": [{
        "id": "did:id_of_DID_method:DIDI_method_specific_id#keys-1",
        "type": "RsaVerificationKey2018",
        "controller": "did:id_of_DID_method:DIDI_method_specific_id",
        "publicKeyPem": "-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\r\n"
      }],
      "service": [{
        "id":"did:id_of_DID_method:123456789abcdefghi#vcs",
        "type": "VerifiableCredentialService",
        "serviceEndpoint": "https://example.com/vc/"
      }]
    }
  NOTE:  A single DID document could be related to N DIDs in 1-to-N
  relationship, allowing the same "identity" be represented by different
  implementations/methods (e.g., one DID on top Ethereum , and another
  one on top of github+gpg).
• DID controller refers to the subject that can prove "ownership" or
  "control" of the DID (in practice through private/pub crypto signature)
  whithout the intervention of permissions of third parties.
  More formaly, it represents the entity/ies authorized to make changes
  to the associated DID Document.
  · Authorization and Delegation of DID Document's controller is contemplated.
• Designed to provide Global unique identifier world-wide.
• DID registries are in charge of storing or recording the DID documents.
  Such registries can be and many times are virtual ones:
  - from the DID the DID Document can be generated using an algorithm.
    E.g.: a DID based on a public key contains all the information needed
          to recreate the DID Document.
          On the other side, a DID can require some sort of existing
          database to recreate the DID Document. In such case this database
          will be the DID registry.
• Technology neutral but most implementations works on top of public/
  permissioned blockchains.
• Part of a bigger echosystem.  W3C models identity as a graph, where nodes
  are globally unique IDs and directed edges are claims that neighbors nodes
  make towards it:
 i[./W3C_Identity.svg|min-width:2rem; max-width:90%]
• DID Method Registry :
  more than 80 implementations (methods) currently available
  @[https://w3c-ccg.github.io/did-method-registry/]
• Public Keys in DID documents are expressed in either
  · JSON Web Key (JWK) format using the publicKeyJwk property
  · JWK or Privacy Enhanced Mail (PEM) encoding Base58
  · Ed25519           public key encoded as JWK or raw 32─byte Base58 Bitcoin format
  · Secp256k1 Koblitz "      "    "       "  "   "  "  33 "     "     "        "
  · Secp256r1         "      "    "       "  "   "  "  32 "     "     "        "
  · Curve25519        "      "    "       "  "   "  "  32 "     "     "        "
    ("X25519")
•   WARN:  Caching and expiration of the keys in a DID document is entirely the
            responsibility of DID resolvers and other clients.
[[}]]

● Solid (decentrilized) Protocol [[{security.aaa,code.low_code,data_management.rdf,standards,protocol.solid,use_case.identity.ssi,02_doc_has.comparative,01_PM.BACKLOG]]
@[https://solidproject.org/for-developers/]
• Standard proposed by Teem Berners Lee (Web inventor).
• Solid is an extension (vs replacement) of current Webs,
  working on any modern browser.
• The objective is to centralize all "scattered data" around
  on the Internet like Social Networks, Online-Shops (Amazon,...),
  digital services  (online banks, ...) and keep that data under
  the control on final users (vs Facebook, Google, Amazon,...).
  User's "Pods" are in charge of storing all our personal data:
  Pods can be self-hosted or provided by Pod's service provider.
• Compares to W3C DID/VC. WebID is the equivalent to W3C DID.    [comparative]
  As with DIDs, different WebID's can be owned by the same person,
  e.g., one WebID issued by governments, another self-issued WebID for
  personal uses, ...
• "Vocabularies" help to interpret Pod's data to any independent
  service/application/company that has been granted access.
• Helps to build application decoupled from data , avoiding to   [low-code]
  maintain a separate back-end.
• Data is requested directly to users (vs provider's custom API).


[[}]]
